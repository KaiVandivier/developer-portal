(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{109:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var o=t(0),a=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),s=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=s(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),u=o,m=d["".concat(l,".").concat(u)]||d[u]||b[u]||i;return t?a.a.createElement(m,r(r({ref:n},p),{},{components:t})):a.a.createElement(m,r({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=u;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=t[p];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},81:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return r})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return s}));var o=t(3),a=t(7),i=(t(0),t(109)),l={slug:"ui-5-release",title:"ui 5 release",author_title:"DHIS2 Core Team",tags:["libraries","ui-core","ui-widgets","ui-forms","ui"]},r={permalink:"/dev-portal-demo/blog/ui-5-release",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/blog/blog/2020-05-28-ui-5-release.md",source:"@site/blog/2020-05-28-ui-5-release.md",description:"We've recently released @dhis2/ui version 5. It unifies ui-core, ui-widgets and ui-forms to simplify the user experience and allow for some architectural changes. In this post we'll go through the most important changes to try and help you with the upgrading process. To view a complete list of all the changes see the changelog.",date:"2020-05-28T00:00:00.000Z",tags:[{label:"libraries",permalink:"/dev-portal-demo/blog/tags/libraries"},{label:"ui-core",permalink:"/dev-portal-demo/blog/tags/ui-core"},{label:"ui-widgets",permalink:"/dev-portal-demo/blog/tags/ui-widgets"},{label:"ui-forms",permalink:"/dev-portal-demo/blog/tags/ui-forms"},{label:"ui",permalink:"/dev-portal-demo/blog/tags/ui"}],title:"ui 5 release",readingTime:13.425,truncated:!0,prevItem:{title:"SameSite Cookie Policies and DHIS2 Applications",permalink:"/dev-portal-demo/blog/cross-origin-cookies"}},c=[{value:"Import style",id:"import-style",children:[]},{value:"Noticebox",id:"noticebox",children:[]},{value:"Specifying selected options",id:"specifying-selected-options",children:[{value:"Transfer",id:"transfer",children:[]},{value:"SingleSelect and MultiSelect",id:"singleselect-and-multiselect",children:[]}]},{value:"Transfer options",id:"transfer-options",children:[]},{value:"Layering components",id:"layering-components",children:[{value:"Layer",id:"layer",children:[]},{value:"ComponentCover",id:"componentcover",children:[]},{value:"CenteredContent",id:"centeredcontent",children:[]}]},{value:"Click based Menu",id:"click-based-menu",children:[{value:"Renamed components",id:"renamed-components",children:[]},{value:"MenuDivider and MenuSectionHeader",id:"menudivider-and-menusectionheader",children:[]},{value:"Submenus",id:"submenus",children:[]}]},{value:"Form components",id:"form-components",children:[{value:"Final-form enabled components suffix",id:"final-form-enabled-components-suffix",children:[]},{value:"Scoped react-final-form and final-form exports",id:"scoped-react-final-form-and-final-form-exports",children:[]},{value:"Explicit api for final-form enabled toggle components",id:"explicit-api-for-final-form-enabled-toggle-components",children:[]},{value:"Generic Field component",id:"generic-field-component",children:[]},{value:"Removal of grouping components",id:"removal-of-grouping-components",children:[]},{value:"New grouping components",id:"new-grouping-components",children:[]}]},{value:"Translations",id:"translations",children:[]},{value:"Other notable changes",id:"other-notable-changes",children:[]}],p={toc:c};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"We've recently released ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui")," version 5. It unifies ",Object(i.b)("inlineCode",{parentName:"p"},"ui-core"),", ",Object(i.b)("inlineCode",{parentName:"p"},"ui-widgets")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ui-forms")," to simplify the user experience and allow for some architectural changes. In this post we'll go through the most important changes to try and help you with the upgrading process. To view a complete list of all the changes see ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/dhis2/ui/releases/tag/v5.0.0"}),"the changelog"),"."),Object(i.b)("p",null,"For upgrading to the latest version of ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui")," we recommend to not mix the upgrade changes with other changes in your codebase. To keep the process manageable, branch off of your production branch (commonly ",Object(i.b)("inlineCode",{parentName:"p"},"master"),") then upgrade and merge back your changes. A common best practice for all changes to a codebase of course."),Object(i.b)("p",null,"If there's anything you've missed in this post, or encountered whilst upgrading, please ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/dhis2/ui/issues"}),"let us know")," and we'll add it."),Object(i.b)("h2",{id:"import-style"},"Import style"),Object(i.b)("p",null,"Since ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui")," now bundles all our ui libraries, you can now import everything that you imported previously from ",Object(i.b)("inlineCode",{parentName:"p"},"ui-core"),", ",Object(i.b)("inlineCode",{parentName:"p"},"ui-widgets")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ui-forms")," directly from ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui"),". An example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"// Before ui version 5:\nimport { Button } from '@dhis2/ui-core'\nimport { HeaderBar } from '@dhis2/ui-widgets'\nimport { composeValidators } from '@dhis2/ui-forms'\n\n// With ui version 5:\nimport { Button, HeaderBar, composeValidators } from '@dhis2/ui'\n")),Object(i.b)("p",null,"The original libraries are still published alongside ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui"),", so if you want you can still import from the underlying libraries. We do recommend that you use ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui")," though, as that way you don't have to know which underlying library the component is exported from."),Object(i.b)("h2",{id:"noticebox"},"Noticebox"),Object(i.b)("p",null,"We've added a notice box component. A notice box highlights useful information that is directly relevant to the page the user is viewing. It is meant to be used wherever there is important, temporary information about a page or situation that the user needs to be aware of."),Object(i.b)("p",null,"See the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/dhis2/design-system/blob/master/molecules/notice-box.md"}),"design specs")," for more information about the component. As an example, this is how you could use the NoticeBox to display a warning to a user:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'const Warning = () => (\n    <Noticebox warning title="Possible duplicate of another entry">\n        This entry has been marked as a duplicate. This should be fixed by an admin.\n        <a href="https://link.to">Further explanation</a>\n    </Noticebox>\n)\n')),Object(i.b)("h2",{id:"specifying-selected-options"},"Specifying selected options"),Object(i.b)("p",null,"To simplify specifying selected options with our components, we've moved to a slightly simpler API. Instead of having to pass objects, or an array of objects with ",Object(i.b)("inlineCode",{parentName:"p"},"value")," and ",Object(i.b)("inlineCode",{parentName:"p"},"label"),", now only a ",Object(i.b)("inlineCode",{parentName:"p"},"value")," string or an array of ",Object(i.b)("inlineCode",{parentName:"p"},"value")," strings is sufficient. This change affects the ",Object(i.b)("inlineCode",{parentName:"p"},"Transfer"),", the ",Object(i.b)("inlineCode",{parentName:"p"},"SingleSelect")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"MultiSelect"),"."),Object(i.b)("h3",{id:"transfer"},"Transfer"),Object(i.b)("p",null,"As noted above, instead of accepting an array of objects for the ",Object(i.b)("inlineCode",{parentName:"p"},"selected")," prop, the ",Object(i.b)("inlineCode",{parentName:"p"},"Transfer")," now expects an array of strings. The strings supplied to the ",Object(i.b)("inlineCode",{parentName:"p"},"selected")," prop should match the ",Object(i.b)("inlineCode",{parentName:"p"},"value")," prop of a supplied option. So as an illustration:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"// Before ui version 5:\nconst Old = () => (\n    <Transfer\n        selected={[\n            { label: 'label 1', value: 'value 1' }\n        ]}\n    />\n)\n\n// With ui version 5:\nconst New = () => (\n    <Transfer\n        selected={[\n            'value 1' // This should match the value of an existing option\n        ]}\n    />\n)\n")),Object(i.b)("h3",{id:"singleselect-and-multiselect"},"SingleSelect and MultiSelect"),Object(i.b)("p",null,"Just like the ",Object(i.b)("inlineCode",{parentName:"p"},"Transfer"),", the ",Object(i.b)("inlineCode",{parentName:"p"},"SingleSelect")," and ",Object(i.b)("inlineCode",{parentName:"p"},"MultiSelect")," now also expect strings instead of objects for the ",Object(i.b)("inlineCode",{parentName:"p"},"selected")," prop. To illustrate:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"// Before ui version 5:\nconst OldSingle = () => (\n    <SingleSelect\n        selected={\n            { label: 'label 1', value: 'value 1' }\n        }\n    />\n)\nconst OldMulti = () => (\n    <MultiSelect\n        selected={[\n            { label: 'label 1', value: 'value 1' }\n        ]}\n    />\n)\n\n// With ui version 5:\nconst NewSingle = () => (\n    <SingleSelect\n        selected=\"value 1\"\n    />\n)\nconst NewMulti = () => (\n    <MultiSelect\n        selected={[\n            'value 1'\n        ]}\n    />\n)\n")),Object(i.b)("p",null,"Note that the ",Object(i.b)("inlineCode",{parentName:"p"},"SingleSelect")," expects a single string, and the ",Object(i.b)("inlineCode",{parentName:"p"},"MultiSelect")," an array of strings."),Object(i.b)("p",null,"This change also means that the Selects can no longer distinguish between options with identical values, even if the labels are different, as they now only have the values to compare by. Make sure that this is not a problem in your application before using the new Selects."),Object(i.b)("h2",{id:"transfer-options"},"Transfer options"),Object(i.b)("p",null,"The Transfer now expects options to be passed to an ",Object(i.b)("inlineCode",{parentName:"p"},"options")," prop instead of as children. It is our intention to eventually move all our components to this API, as it allows for far simpler internals. An example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"// Before ui version 5:\nconst Old = () => (\n    <Transfer>\n        <TransferOption\n            label=\"label 1\"\n            value=\"value 1\"\n        />\n        <TransferOption\n            label=\"label 2\"\n            value=\"value 2\"\n        />\n    </Transfer>\n)\n\n// With ui version 5:\nconst New = () => (\n    <Transfer\n        options={[\n            { label: 'label 1', value: 'value 1' },\n            { label: 'label 2', value: 'value 2' }\n        ]}\n    />\n)\n")),Object(i.b)("p",null,"If you want to use a custom option component, you can still do so. The ",Object(i.b)("inlineCode",{parentName:"p"},"Transfer")," accepts a ",Object(i.b)("inlineCode",{parentName:"p"},"renderOption")," prop, where you can supply a callback that returns the markup for a custom option. This pattern is called the render prop pattern, see the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://reactjs.org/docs/render-props.html"}),"React docs")," for further information. An illustration of how this works:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const WithCustomOptions = () => (\n    <Transfer\n        options={[\n            { label: 'label 1', value: 'value 1' },\n            { label: 'label 2', value: 'value 2' },\n        ]}\n        renderOption={({ value, label, onClick, onDoubleClick, highlighted }) => (\n            <div onClick={onClick} onDoubleClick={onDoubleClick}>\n                The value of this option is: {value}\n                The label of this option is: {label}\n                {highlighted && 'This option is highlighted'}\n            </div>\n        )}\n    />\n)\n")),Object(i.b)("h2",{id:"layering-components"},"Layering components"),Object(i.b)("p",null,"We've changed the set of components used to produce various types of overlays. The underlying logic has been improved and we've clarified the scope of certain components that did a bit too much."),Object(i.b)("p",null,"More specifically, ",Object(i.b)("inlineCode",{parentName:"p"},"Layer")," and ",Object(i.b)("inlineCode",{parentName:"p"},"CenteredContent")," have been introduced to replace the ",Object(i.b)("inlineCode",{parentName:"p"},"Backdrop")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ScreenCover")," and the API for the ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentCover")," component has been aligned with the ",Object(i.b)("inlineCode",{parentName:"p"},"Layer"),"."),Object(i.b)("h3",{id:"layer"},"Layer"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Layer")," is an overlay component that fills the entire viewport and allows you to stack various components on top of one another. The ",Object(i.b)("inlineCode",{parentName:"p"},"Layer")," accepts an ",Object(i.b)("inlineCode",{parentName:"p"},"onClick")," callback, so you can catch clicks on the background of whatever you're rendering. It also has a ",Object(i.b)("inlineCode",{parentName:"p"},"translucent")," prop, if you want the ",Object(i.b)("inlineCode",{parentName:"p"},"Layer")," to darken the background slightly (the default is fully transparent). An example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const LayerExample = () => (\n    <div>\n        <Layer>\n            <p>This will be rendered on top of the app, regardless of where you place it in your markup</p>\n        </Layer>\n        <p>Text behind the layer</p>\n    </div>\n)\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Layer")," uses React context internally to control the stacking logic. This context has been exposed via the ",Object(i.b)("inlineCode",{parentName:"p"},"useLayerContext")," hook, which can be used to append portals to the current layer-node, for advanced users."),Object(i.b)("h3",{id:"componentcover"},"ComponentCover"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentCover")," is similar to the ",Object(i.b)("inlineCode",{parentName:"p"},"Layer"),", except ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentCover")," only fills its parent, provided that the parent is positioned (so has a ",Object(i.b)("inlineCode",{parentName:"p"},"relative"),",",Object(i.b)("inlineCode",{parentName:"p"},"absolute"),", ",Object(i.b)("inlineCode",{parentName:"p"},"fixed")," or ",Object(i.b)("inlineCode",{parentName:"p"},"sticky")," position). The ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentCover")," also accepts an ",Object(i.b)("inlineCode",{parentName:"p"},"onClick")," and ",Object(i.b)("inlineCode",{parentName:"p"},"translucent")," prop, just like the ",Object(i.b)("inlineCode",{parentName:"p"},"Layer"),". An example of the ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentCover"),":"),Object(i.b)("p",null,"{% raw %}"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const ComponentCoverExample = () => (\n    <div style={{ position: 'relative' }}>\n        <ComponentCover>\n            <p>\n                The ComponentCover will fill the parent div,\n                and render this paragraph on top of the div visually.\n            </p>\n        </ComponentCover>\n    </div>\n)\n")),Object(i.b)("p",null,"{% endraw %}"),Object(i.b)("h3",{id:"centeredcontent"},"CenteredContent"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"CenteredContent")," is a component that centers its children. It has a ",Object(i.b)("inlineCode",{parentName:"p"},"position")," prop which can be used to vertically align the children at the ",Object(i.b)("inlineCode",{parentName:"p"},"top"),", ",Object(i.b)("inlineCode",{parentName:"p"},"middle")," (default), or ",Object(i.b)("inlineCode",{parentName:"p"},"bottom"),". It can be useful when you want to render a loading spinner on top of your app for example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"// This will render a spinner on top of your app, centered in the middle\nconst Loading = () => (\n    <Layer>\n        <CenteredContent>\n            <CircularLoader />\n        </CenteredContent>\n    </Layer>\n)\n")),Object(i.b)("h2",{id:"click-based-menu"},"Click based Menu"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Menu")," has been refactored to make it easier to use. It is now click-based instead of hover-based, so sub-menus will stay open even if the user is no longer hovering over them."),Object(i.b)("h3",{id:"renamed-components"},"Renamed components"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"MenuList")," has been renamed to ",Object(i.b)("inlineCode",{parentName:"p"},"Menu"),", this component will expand to fill the full width of the parent container and is not meant to contain submenus. It is a good fit for a sidebar menu for example."),Object(i.b)("p",null,"The original ",Object(i.b)("inlineCode",{parentName:"p"},"Menu")," component has been renamed to ",Object(i.b)("inlineCode",{parentName:"p"},"FlyoutMenu"),", which will render a menu in a ",Object(i.b)("inlineCode",{parentName:"p"},"Card")," and allows for submenus. An example of both:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'// So this will render full-width\nconst FullWidthMenu = () => (\n    <Menu>\n        <MenuItem label="Item 1" />\n        <MenuItem label="Item 2" />\n    </Menu>\n)\n\n// And this will render in a Card with width/height restrictions\nconst CardMenu = () => (\n    <FlyoutMenu>\n        <MenuItem label="Item 1" />\n        <MenuItem label="Item 2" />\n    </FlyoutMenu>\n)\n')),Object(i.b)("h3",{id:"menudivider-and-menusectionheader"},"MenuDivider and MenuSectionHeader"),Object(i.b)("p",null,"We've also introduced two new components, the ",Object(i.b)("inlineCode",{parentName:"p"},"MenuDivider")," and ",Object(i.b)("inlineCode",{parentName:"p"},"MenuSectionHeader"),". As you would expect, the ",Object(i.b)("inlineCode",{parentName:"p"},"MenuDivider")," renders a divider between ",Object(i.b)("inlineCode",{parentName:"p"},"MenuItems"),". The ",Object(i.b)("inlineCode",{parentName:"p"},"MenuSectionHeader")," can be used to render a header in between menu-items. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'const WithHeaderAndDivider = () => (\n    <Menu>\n        <MenuSectionHeader label="The header" />\n        <MenuItem label="Item 1" />\n        <MenuItem label="Item 2" />\n        <MenuDivider />\n        <MenuItem label="Item 3" />\n        <MenuItem label="Item 4" />\n    </Menu>\n)\n')),Object(i.b)("h3",{id:"submenus"},"Submenus"),Object(i.b)("p",null,"Finally, to create sub-menus, you can now add MenuItems directly under a parent MenuItem, there's no need to wrap them in another component anymore:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'const WithSubMenus = () => (\n    <FlyoutMenu>\n        <MenuItem label="Item 1" />\n        <MenuItem label="Item 2">\n            <MenuItem label="Item 2 a" />\n            <MenuItem label="Item 2 b">\n                <MenuItem label="Item 2 b i" />\n                <MenuItem label="Item 2 b ii" />\n            </MenuItem>\n            <MenuItem label="Item 2 c" />\n        </MenuItem>\n    </FlyoutMenu>\n)\n')),Object(i.b)("h2",{id:"form-components"},"Form components"),Object(i.b)("h3",{id:"final-form-enabled-components-suffix"},"Final-form enabled components suffix"),Object(i.b)("p",null,"If you were using our ",Object(i.b)("inlineCode",{parentName:"p"},"final-form")," enabled components from ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui-forms")," you'll probably know that they did not have a suffix. They were just exported as ",Object(i.b)("inlineCode",{parentName:"p"},"Checkbox"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Radio"),", etc. However, those names collided with our regular form fields in ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui"),"."),Object(i.b)("p",null,"To remedy that, we've now suffixed all our ",Object(i.b)("inlineCode",{parentName:"p"},"final-form")," enabled components with ",Object(i.b)("inlineCode",{parentName:"p"},"FieldFF"),". The Field suffix indicates the relation with our regular Field components and the FF stands for ",Object(i.b)("inlineCode",{parentName:"p"},"final-form"),". Note that this is only important for you if you were using the ",Object(i.b)("inlineCode",{parentName:"p"},"final-form")," enabled components, our regular form components are unaffected! So, for example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'// Before ui version 5:\nimport { Field, Input } from \'@dhis2/ui-forms\'\n\nconst InputField = () => (\n    <Field\n        name="text"\n        label="Text"\n        component={Input}\n        helpText="Please enter text"\n    />\n)\n\n// With ui version 5:\nimport { ReactFinalForm, InputFieldFF } from \'@dhis2/ui-forms\'\nconst { Field } = ReactFinalForm // this change is explained in the next section\n\nconst InputField = () => (\n    <Field\n        name="text"\n        label="Text"\n        component={InputFieldFF}\n        helpText="Please enter text"\n    />\n)\n')),Object(i.b)("h3",{id:"scoped-react-final-form-and-final-form-exports"},"Scoped react-final-form and final-form exports"),Object(i.b)("p",null,"As you can see in the example above, the re-export style for ",Object(i.b)("inlineCode",{parentName:"p"},"react-final-form")," and ",Object(i.b)("inlineCode",{parentName:"p"},"final-form")," has changed. With ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui-forms")," we re-exported the ",Object(i.b)("inlineCode",{parentName:"p"},"react-final-form")," and ",Object(i.b)("inlineCode",{parentName:"p"},"final-form")," exports directly. We still re-export these libraries with ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui"),", but we've scoped the exports to the ",Object(i.b)("inlineCode",{parentName:"p"},"ReactFinalForm")," and ",Object(i.b)("inlineCode",{parentName:"p"},"FinalForm")," named exports. To clarify:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"// Before ui version 5:\nimport { useField } from '@dhis2/ui-forms'\n\n// With ui version 5:\nimport { ReactFinalForm, FinalForm } from '@dhis2/ui'\n\nconst { useField } = ReactFinalForm\nconst { FORM_ERROR } = FinalForm\n")),Object(i.b)("h3",{id:"explicit-api-for-final-form-enabled-toggle-components"},"Explicit api for final-form enabled toggle components"),Object(i.b)("p",null,"We've modified our toggle components (",Object(i.b)("inlineCode",{parentName:"p"},"SwitchFieldFF"),", ",Object(i.b)("inlineCode",{parentName:"p"},"CheckboxFieldFF"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"RadioFieldFF"),") to use an API that aligns more closely with the ",Object(i.b)("inlineCode",{parentName:"p"},"react-final-form")," API. This means that when using one of these toggle components, you have to provide a ",Object(i.b)("inlineCode",{parentName:"p"},"type")," attribute, to signal the type of field to ",Object(i.b)("inlineCode",{parentName:"p"},"react-final-form"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import { ReactFinalForm, RadioFieldFF, CheckboxFieldFF, SwitchFieldFF } from \'@dhis2/ui\'\nconst { Field } = ReactFinalForm\n\nconst Fields = () => (\n    <div>\n        <Field\n            type="radio"\n            component={RadioFieldFF}\n        />\n        <Field\n            type="checkbox"\n            component={CheckboxFieldFF}\n        />\n        <Field\n            type="checkbox"\n            component={SwitchFieldFF}\n        />\n    </div>\n)\n')),Object(i.b)("p",null,"Because of this change, our components will now behave like explained in the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://final-form.org/docs/react-final-form/types/FieldProps"}),"react-final-form docs")," (see the ",Object(i.b)("inlineCode",{parentName:"p"},"type")," section):"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},'If set to "checkbox" or "radio", React Final Form will know to manage your values as a checkbox or radio button respectively. Results in a checked boolean inside the input value given to your render prop.')),Object(i.b)("h3",{id:"generic-field-component"},"Generic Field component"),Object(i.b)("p",null,"To simplify the creation of custom form fields, our ",Object(i.b)("inlineCode",{parentName:"p"},"Field")," component has been modified. The ",Object(i.b)("inlineCode",{parentName:"p"},"Field")," can now be used to wrap a custom form field and will allow displaying a label, helptext and validation messages in the same style as our other form components. So for example, say that you have a custom ",Object(i.b)("inlineCode",{parentName:"p"},"input")," field, and you want to use it with our ",Object(i.b)("inlineCode",{parentName:"p"},"Field"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import { Field } from \'@dhis2/ui\'\n\nconst CustomFormComponent = () => (\n    <Field\n        label="The label for this input"\n        helpText="This is a custom form field"\n        validationText="The input is valid"\n        required\n        valid\n    >\n        <input />\n    </Field>\n)\n')),Object(i.b)("p",null,"Note that the ",Object(i.b)("inlineCode",{parentName:"p"},"Field")," we're covering in this section, the one exported directly from ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui"),", is different from the ",Object(i.b)("inlineCode",{parentName:"p"},"Field")," from ",Object(i.b)("inlineCode",{parentName:"p"},"react-final-form"),". The latter exists for integration with ",Object(i.b)("inlineCode",{parentName:"p"},"final-form"),", whereas the ",Object(i.b)("inlineCode",{parentName:"p"},"Field")," exported directly from ",Object(i.b)("inlineCode",{parentName:"p"},"@dhis2/ui")," is meant to help align styles for custom form fields with our other form components."),Object(i.b)("h3",{id:"removal-of-grouping-components"},"Removal of grouping components"),Object(i.b)("p",null,"We've removed the grouping components for our toggle components: ",Object(i.b)("inlineCode",{parentName:"p"},"RadioGroup"),", ",Object(i.b)("inlineCode",{parentName:"p"},"RadioGroupField"),", ",Object(i.b)("inlineCode",{parentName:"p"},"CheckboxGroup"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"CheckboxGroupField"),". These components could be used to wrap our toggle components and would add the necessary props and event handlers by cloning their children. We've removed them because these components were blocking a generic ",Object(i.b)("inlineCode",{parentName:"p"},"Field")," and because we're trying to move to more explicit patterns, to improve readability and maintainability. A simplified example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'// Before ui version 5:\nimport React, { useState } from \'react\'\nimport { RadioGroup, Radio } from \'@dhis2/ui-core\'\n\nconst RadioButtons = () => {\n    const [selection, setSelection] = useState(\'1\')\n    const options = [\n        { value: "1", label: "one" }\n        { value: "2", label: "two" }\n    ]\n\n    return (\n        <RadioGroup\n            value={selection}\n            onChange={({ value }) => setSelection(value)}\n        >\n            {options.map({ value, label }) => (\n                <Radio\n                    value={value}\n                    label={label}\n                    key={value}\n                />\n            )}\n        </RadioGroup>\n    )\n}\n\n// With ui version 5:\nimport React, { useState } from \'react\'\nimport { FieldGroup, Radio } from \'@dhis2/ui\'\n\nconst RadioButtons = () => {\n    const [selection, setSelection] = useState(\'1\')\n    const options = [\n      { value: "1", label: "one" }\n      { value: "2", label: "two" }\n    ]\n\n    // The FieldGroup below can be omitted if necessary, see the explanation of FieldGroup below\n    return (\n        <FieldGroup>\n            {options.map({ value, label }) => (\n                <Radio\n                    value={value}\n                    label={label}\n                    key={value}\n                    onChange={({ value: newValue }) => setSelection(newValue)}\n                    checked={value === selection}\n                />\n            )}\n        </FieldGroup>\n    )\n}\n')),Object(i.b)("h3",{id:"new-grouping-components"},"New grouping components"),Object(i.b)("p",null,"Instead of the grouping components mentioned above, we've introduced simplified grouping components that don't modify their children via cloning: ",Object(i.b)("inlineCode",{parentName:"p"},"FieldSet"),", ",Object(i.b)("inlineCode",{parentName:"p"},"FieldGroup")," and ",Object(i.b)("inlineCode",{parentName:"p"},"FieldGroupFF"),"."),Object(i.b)("h4",{id:"fieldset"},"FieldSet"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"FieldSet")," is the most basic of the three, it can be used if you want to group several related controls as well as labels in a form (see the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset"}),"MDN docs on fieldset"),"). An example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import { FieldSet, Legend, Radio } from \'@dhis2/ui\'\n\nconst RadioButtons = () => (\n    <FieldSet>\n        <Legend>Choose your favourite monster</Legend>\n        <Radio label="Kraken" value="kraken" />\n        <Radio label="Sasquatch" value="sasquatch" />\n    </FieldSet>\n)\n')),Object(i.b)("h4",{id:"fieldgroup"},"FieldGroup"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"FieldGroup")," wraps your controls in a ",Object(i.b)("inlineCode",{parentName:"p"},"FieldSet")," as well as a ",Object(i.b)("inlineCode",{parentName:"p"},"Field"),". It can be used in the same manner as our regular ",Object(i.b)("inlineCode",{parentName:"p"},"Field")," component, but for a group of controls. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import { FieldGroup, Radio } from \'@dhis2/ui\'\n\nconst RadioButtons = () => (\n    <FieldGroup\n        label="The label for this group"\n        helpText="This is a custom form field"\n        validationText="The input is valid"\n        required\n        valid\n    >\n        <Legend>Choose your favourite monster</Legend>\n        <Radio label="Kraken" value="kraken" />\n        <Radio label="Sasquatch" value="sasquatch" />\n    </FieldGroup>\n)\n')),Object(i.b)("h4",{id:"fieldgroupff"},"FieldGroupFF"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"FieldGroupFF")," does the same as the ",Object(i.b)("inlineCode",{parentName:"p"},"FieldGroup"),", but also connects to ",Object(i.b)("inlineCode",{parentName:"p"},"final-form"),", and displays error state and error messages from the underlying fields automatically. Just like our other ",Object(i.b)("inlineCode",{parentName:"p"},"final-form")," connected components. An example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import { FieldGroupFF, RadioFieldFF, ReactFinalForm } from \'@dhis2/ui\'\nconst { Field } = ReactFinalForm\n\nconst RadioButtons = () => (\n    <FieldGroupFF\n        name="monster"\n        label="The label for this group"\n        required\n    >\n        <Legend>Choose your favourite monster</Legend>\n        <Field\n            name="monster"\n            type="radio"\n            component={RadioFieldFF}\n        />\n        <Field\n            name="monster"\n            type="radio"\n            component={RadioFieldFF}\n        />\n    </FieldGroup>\n)\n')),Object(i.b)("h2",{id:"translations"},"Translations"),Object(i.b)("p",null,"We've added translations to the following widgets: ",Object(i.b)("inlineCode",{parentName:"p"},"FileInputField"),", ",Object(i.b)("inlineCode",{parentName:"p"},"SingleSelectField"),", ",Object(i.b)("inlineCode",{parentName:"p"},"MultiSelectField"),". We'll be adding translations to all components in widgets, so that you're not required to add these yourself every time you use them."),Object(i.b)("h2",{id:"other-notable-changes"},"Other notable changes"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Popover"),": ",Object(i.b)("inlineCode",{parentName:"li"},"onBackdropClick")," has been renamed to ",Object(i.b)("inlineCode",{parentName:"li"},"onClickOutside")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Constrictor"),": has been renamed to ",Object(i.b)("inlineCode",{parentName:"li"},"Box")," since it now does more than just restrict sizes")))}s.isMDXComponent=!0}}]);